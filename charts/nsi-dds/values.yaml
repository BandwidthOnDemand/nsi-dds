# Default values for nsi-dds.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  #registry: docker.io
  repository: ghcr.io/bandwidthondemand/nsi-dds
  pullPolicy: IfNotPresent
  # tag overrides the image tag whose default is the chart appVersion
  tag: "1.2.0-1"
  home: "/nsi-dds"


startupProbe:
  enabled: false
  scheme: "HTTP"
  path: "/dds/portal"
  failureThreshold: 30
  periodSeconds: 10
  timeoutSeconds: 5

livenessProbe:
  enabled: false
  scheme: "HTTP"
  path: "/dds/portal"
  failureThreshold: 5
  periodSeconds: 6
  timeoutSeconds: 5

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: false
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  name: nsi-dds
  port: 80
  containerPort: 8401
# configure either ClusterIP or LoadBalancer + ipAddress
  type: ClusterIP
#  type: LoadBalancer
#  ipAddress: 145.101.126.224
#  annotations:
#    service.beta.kubernetes.io/azure-load-balancer-internal: "true"

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: front.example.domain
      paths:
        - path: /dds
          pathType: ImplementationSpecific
          serviceName: nsi-dds"
          servicePort: 80
  tls:
    - secretName: tls-secret-api
      hosts:
        - front.example.domain

# if you do not want to use ingress annotations to generate the Certificate manifest
certificate:
  enabled: false
  name: chart-example-tls
  dnsName: example.domain.toplevel
  issuerRef:
    name: letsencrypt
  secretName: chart-example-tls
  privateKey:
    rotationPolicy: Always
  keystores:
    jks:
      create: false
      password: "secret"
    pkcs12:
      create: false
      password: "secret"

resources:
  requests:
    memory: 0.5Gi
    cpu: 100m
  limits:
    memory: 1.5Gi
    cpu: 1000m

nodeSelector: {}

tolerations: []

affinity: {}

cache:
  mountPath: "/cache"
  storage: "1Gi"

config:
  #
  # nsi-dds needs the following four configuration files:
  # - application.properties
  # - dds.xml
  # - log4j.xml
  #
  # When config.configMapName is defined it must point to an existing configmap, managed outside of Helm,
  # that contains all necessary configuration files. Otherwise, Helm will create a configmap with files from
  # a folder pointed to by config.filesGlob, or the combination of config.inlineData and config.inlineBinaryData
  # is used. Note that filesGlob takes precedence over inline data.
  #
  # When config.keystore.secretName is defined it must point to an existing secret, managed outside of Helm,
  # the file pointed to by config.keystore.key will be mapped to nsi-dds-keystore.jks. In this case the configmap
  # does not need to contain a keystore. To use a truststore from a secret use config.truststore.
  #
  mountPath: "/config"
  #configMapName: my-configmap-with-config
  #configFilesGlob: "config/*"
  inlineData: |-
    dds.xml: |-
      <tns:dds xmlns:tns="http://schemas.es.net/nsi/2014/03/dds/configuration" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <nsaId>urn:ogf:network:example.domain:2017:nsa:safnari</nsaId>
          <documents>/cache/documents</documents>
          <cache>/cache</cache>
          <repository>/cache/repository</repository>
          <expiryInterval>600</expiryInterval>
          <baseURL>https://dds.example.domain/dds</baseURL>
      
          <client secure="true"/>
          <server address="0.0.0.0" port="8401" packageName="net.es.nsi.dds" secure="false"/>
      
          <secure production="true">
            <keyStore type="JKS">
              <file>/config/key/nsi-dds-keystore.jks</file>
              <password>secret</password>
            </keyStore>
            <trustStore type="JKS">
              <file>/config/trust/nsi-dds-truststore.jks</file>
              <password>secret</password>
            </trustStore>
          </secure>
      
          <accessControl enabled="false">
            <rule access="read">
              <dn>EMAILADDRESS=bob@example.com, CN=Bobby Boogie, OU=Sciences Network, O=Example Networks, L=New York, ST=NY, C=US</dn>
            </rule>
            <rule access="write">
              <dn>CN=nsi-aggr-west.es.net, OU=Domain Control Validated</dn>
            <nsaId>urn:ogf:network:es.net:2013:nsa:nsi-aggr-west</nsaId>
            </rule>
          </accessControl>
      
          <peerURL type="application/vnd.ogf.nsi.nsa.v1+xml">https://supa.dev.automation.surf.net/discovery</peerURL>
      </tns:dds>
    logging.properties: |-
      org.glassfish.jersey.config.feature.Trace=true
      org.glassfish.grizzly.config.feature.Trace=true
      
      org.glassfish.jersey.handlers=java.util.logging.ConsoleHandler
      org.glassfish.grizzly.handlers=java.util.logging.ConsoleHandler
    log4j.xml:
      <?xml version="1.0" encoding="UTF-8"?>
      <Configuration status="DEBUG" strict="true" monitorInterval="30"
        xmlns="http://logging.apache.org/log4j/2.0/config"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://logging.apache.org/log4j/2.0/config
        https://raw.githubusercontent.com/apache/logging-log4j2/master/log4j-core/src/main/resources/Log4j-config.xsd">
      
        <Appenders>
          <Console name="LogToConsole" target="SYSTEM_OUT">
            <PatternLayout>
              <Pattern>%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n</Pattern>
            </PatternLayout>
          </Console>
        </Appenders>
      
        <Loggers>
          <Logger name="org.springframework" level="debug" additivity="false">
            <AppenderRef ref="LogToConsole"/>
          </Logger>
          <Logger name="org.eclipse" level="debug" additivity="false">
            <AppenderRef ref="LogToConsole"/>
          </Logger>
          <Logger name="org.apache" level="debug" additivity="false">
            <AppenderRef ref="LogToConsole"/>
          </Logger>
          <Logger name="org.glassfish.jersey" level="debug" additivity="false">
            <AppenderRef ref="LogToConsole"/>
          </Logger>
          <Logger name="org.glassfish.grizzly" level="debug" additivity="false">
            <AppenderRef ref="LogToConsole"/>
          </Logger>
          <Logger name="org.hibernate" level="debug" additivity="false">
            <AppenderRef ref="LogToConsole"/>
          </Logger>
          <Logger name="net.es.nsi.dds" level="debug" additivity="false">
            <AppenderRef ref="LogToConsole"/>
          </Logger>
          <Root level="debug">
            <AppenderRef ref="LogToConsole"/>
          </Root>
        </Loggers>
      </Configuration>

  # When using inline key and trust stores, please replace the Lorem Ipsum below with actual stores.
  inlineBinaryData: |-
    nsi-dds-keystore.jks: |-
      TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2Vk
      IGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlx
      dWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCBxdWlzIG5vc3RydWQgZXhlcmNpdGF0aW9uIHVsbGFt
      Y28gbGFib3JpcyBuaXNpIHV0IGFsaXF1aXAgZXggZWEgY29tbW9kbyBjb25zZXF1YXQuIER1aXMgYXV0
      ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1
      bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBj
      dXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1v
      bGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtLgo=
    nsi-dds-truststore.jks: |-
      TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2Vk
      IGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlx
      dWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCBxdWlzIG5vc3RydWQgZXhlcmNpdGF0aW9uIHVsbGFt
      Y28gbGFib3JpcyBuaXNpIHV0IGFsaXF1aXAgZXggZWEgY29tbW9kbyBjb25zZXF1YXQuIER1aXMgYXV0
      ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZSB2ZWxpdCBlc3NlIGNpbGx1
      bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludCBvY2NhZWNhdCBj
      dXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1v
      bGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtLgo=
  # Use keystore and truststore below to override the nsi-dds-keystore.jks and/or nsi-dds-truststore.jks
  # from the configmap above. For example to use a keystore generated by certmanager.
  keystore:
    #secretName: my-nsi-dds-keystore
    #key: keystore.jks
  truststore:
    #secretName: my-nsi-dds-truststore
    #key: truststore.jks
  # Create /config/trust/nsi-safnari-truststore.jks from ca.crt from caSecretName mounted under /ca
  caSecretName: ""
